plugins {
    id 'distribution'
    id 'java'
}

repositories {
    maven {
        url 'https://hub.chemaxon.com/artifactory/libs-release'
        credentials {
            username cxnHubUser
            password cxnHubPassword
        }
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation project(':aws-examples-common')
    implementation project(':majorms-lambda-example')
    implementation project(':msdistr-lambda-example')
    implementation project(':nmr-lambda-example')

    implementation 'com.beust:jcommander:1.82'
    implementation 'com.google.code.gson:gson:2.10.1'
}

// Use classpath jar file to avoid crash on Windows
// See http://tuhrig.de/gradles-bootrun-and-windows-command-length-limit/
// Note that the manifest of the created pathing jar contains absolute pathnames so it is not portable
tasks.register('pathingJar', Jar) {
    dependsOn configurations.runtimeClasspath, jar
    archiveFileName = 'classpath.jar'
    doFirst {
        manifest {
            attributes "Class-Path": project.configurations.runtimeClasspath.files.collect {
                it.getName()
            }.join(' ') + ' ' + jar.archivePath.getName()
        }
    }
}

// see https://discuss.gradle.org/t/usage-of-distribution-plugin/12874/9
distributions {
    main {
        contents {
            distributionBaseName = 'cli'
            into('lib') {
                from jar
                from pathingJar
                from project.configurations.runtimeClasspath
            }
        }
    }
}

tasks.register('createScripts') {
    dependsOn jar

    doLast {
        def scriptsDir = file("${projectDir}/build/scripts/")
        scriptsDir.deleteDir()
        scriptsDir.mkdir()

        println 'Create launcher scripts into directory ' + scriptsDir

        def createScript = { name, className, jvmargs ->
            def script = new File(scriptsDir, name)

            // do not add extra 'bin' dir to the classpath
            script.text = String.format(
                    'java %s -classpath "%s" %s "$@"\n',
                    jvmargs,
                    sourceSets.main.runtimeClasspath.asPath,
                    className
            )
            script.setExecutable(true)

            println 'Create launcher script "' + name + '" for main class "' + className + '" with JVM args: "' + jvmargs + '"'
        }

        createScript('run-majorms', 'com.chemaxon.calculations.cli.MajorMsCli', '-Xmx2g')

        // print class loading verbose messages during execution
        createScript('run-majorms-vc', 'com.chemaxon.calculations.cli.MajorMsCli', '-Xmx2g -verbose:class')

        createScript('run-msdistr', 'com.chemaxon.calculations.cli.MsDistrCli', '-Xmx2g')

        // print class loading verbose messages during execution
        createScript('run-msdistr-vc', 'com.chemaxon.calculations.cli.MsDistrCli', '-Xmx2g -verbose:class')

        createScript('run-nmr', 'com.chemaxon.calculations.cli.NmrCli', '-Xmx2g')

        // print class loading verbose messages during execution
        createScript('run-nmr-vc', 'com.chemaxon.calculations.cli.NmrCli', '-Xmx2g -verbose:class')
    }
}


